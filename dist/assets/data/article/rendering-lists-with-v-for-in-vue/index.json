{"hash":"d81da9758ec4ff91746f68f923b3701bea4b5490","data":{"post":{"title":"Rendering lists with V-for in Vue","path":"/article/rendering-lists-with-v-for-in-vue/","date":"21 Oct 2022","timeToRead":2,"content":"<p>In almost every front end project, there will come a point where we need to <strong>iteratively</strong> render some elements on the page. If you're a vue developer or just playing around with it, iterating over arrays or objects can be achieved with the <strong>v-for</strong> directives.<br></br></p>\n<p>Using <strong>v-for</strong> in <strong>Vue</strong> will look something like this:<br></br></p>\n<pre><code class=\"language-vue\">&#x3C;template>\n    &#x3C;div v-for=\"item in items\">\n        {{ item.object }}\n    &#x3C;/div>\n&#x3C;/template>\n</code></pre>\n<p><br></br></p>\n<p>Now that you've gotten a sneak preview, let's take a look at how we can use the <strong>v-for</strong> directives in a real world project.<br></br></p>\n<h3 id=\"how-to-use-v-for-in-vue-brbr\"><a href=\"#how-to-use-v-for-in-vue-brbr\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>#How to use v-for in Vue <br></br></h3>\n<p>Just for the sake of this guide, let's imagine we want to iterate over a list of products and output them on the page while working on a eCommerce website. Below is a static lists of products we want to output:<br></br></p>\n<pre><code class=\"language-vue\">&#x3C;template> &#x3C;/template>\n\n&#x3C;script>\nexport default {\n    data() {\n        return {\n            products: [\n                { id: 1, name: \"Apple iPhone 14\", price: 2000, inStock: true },\n                { id: 2, name: \"Airpod\", price: 250, inStock: true },\n                { id: 3, name: \"Samsung s22 Ultra\", price: 1700, inStock: true },\n                { id: 4, name: \"Apple iPhone X\", price: 500, inStock: false },\n                { id: 5, name: \"Tecno Premier\", price: 300, inStock: true },\n            ],\n        };\n    },\n}\n&#x3C;/script>\n</code></pre>\n<p><br></br></p>\n<p>Now that we've got our data statically ready, we can iteratively work with them in our <strong>template</strong> tag like so ðŸ‘‡: <br></br></p>\n<pre><code class=\"language-html\">&#x3C;div v-for=\"product in products\">\n    &#x3C;h2> {{ product.name }} &#x3C;/h2>\n    &#x3C;p> {{ product.price }} &#x3C;/p>\n    &#x3C;!-- Use the **inStock** field to make something happen based on it's value -->\n&#x3C;/div>\n</code></pre>\n<p><br></br></p>\n<p>Even though the data will be displayed on our page now, to further solidify our <strong>code</strong>, we still have one thing left to do. Our elements doesn't have a unique identity called (<strong>key</strong>) attached to them, it is recommended to do so for a few reasons.<br></br></p>\n<h3 id=\"add-key-to-vue-v-for-loops-brbr\"><a href=\"#add-key-to-vue-v-for-loops-brbr\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>#Add key to Vue v-for loops <br></br></h3>\n<p>You might be wondering ðŸ¤”, what is a <strong>key</strong> in Vue? A simple explanation is, it is a special attribute and a way of giving Vue a hint to track each of our page node's identity. If a <strong>key</strong> isn't provided for a node, the element movement will be minimized when <strong>DOM</strong> is getting updated. <br></br></p>\n<p>To attach a unique <strong>key</strong> to the node, we have to bind it using <strong>:key=\"nodeId\"</strong>. So let's update our product data which we created earlier like so:</p>\n<p><br></br></p>\n<pre><code class=\"language-html\">&#x3C;div v-for=\"product in products\" :key=\"product.id\">\n    &#x3C;h2> {{ product.name }} &#x3C;/h2>\n    &#x3C;p> {{ product.price }} &#x3C;/p>\n    &#x3C;!-- Use the **inStock** field to make something happen based on it's value -->\n&#x3C;/div>\n</code></pre>\n<p><br></br></p>\n<p>Using a <strong>v-for</strong> directives to dynamically render an <strong>array</strong> or <strong>object</strong> containing data is as simple as that. If you have any question or simply have a way to further improve the code used, comment ðŸ’¬ below.</p>\n","tags":[{"id":"vue","title":"vue","path":"/tag/vue/"},{"id":"forloop","title":"forloop","path":"/tag/forloop/"}]}},"context":{}}